# Redirect all HTTP traffic to HTTPS
server {
  listen 80;
  listen [::]:80;
  server_name .example.com;
  return 301 https://$host$request_uri;
}

# Redirect from www to naked domain over HTTPS
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_tokens off;

    # SSL certificates
    ssl_certificate_key /etc/nginx/ssl-certificates/example.com.key;
    ssl_certificate /etc/nginx/ssl-certificates/example.com.crt;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    server_name www.example.com;
    return 301 https://example.com$request_uri;
}

# Main server block for handling HTTPS requests
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name example.com www1.example.com;
    server_tokens off;

    root /home/jmygsh/htdocs/example.com/public;

    # SSL (DO NOT REMOVE!)
    ssl_certificate_key /etc/nginx/ssl-certificates/example.com.key;
    ssl_certificate /etc/nginx/ssl-certificates/example.com.crt;

    # Logging
    access_log /home/jmygsh/logs/nginx/access.log main;
    error_log /home/jmygsh/logs/nginx/error.log;

    # Force HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }

    # Let's Encrypt verification
    location ~ /.well-known {
        auth_basic off;
        allow all;
    }

    

    # Main application proxy
    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header X-Varnish;
        proxy_redirect off;
        proxy_max_temp_file_size 0;
        proxy_connect_timeout 720;
        proxy_send_timeout 720;
        proxy_read_timeout 720;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_temp_file_write_size 256k;
    }

    # Static file handling
    location ~* \.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|woff2|eot|mp4|ogg|ogv|webm|webp|zip|swf|map)$ {
        add_header Access-Control-Allow-Origin "*";
        expires max;
        access_log off;
    }

    # Handle direct file access
    if (-f $request_filename) {
        break;
    }
}

# Backend server handling PHP requests
server {
    listen 8080;
    listen [::]:8080;
    server_name example.com www1.example.com;
    root /home/jmygsh/htdocs/example.com/public;

    # PHP handling
    try_files $uri $uri/ /index.php?$args;
    index index.php index.html;

    location ~ \.php$ {
        include fastcgi_params;
        fastcgi_intercept_errors on;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        try_files $uri =404;
        fastcgi_read_timeout 3600;
        fastcgi_send_timeout 3600;
        fastcgi_param HTTPS "on";
        fastcgi_param SERVER_PORT 443;
        fastcgi_pass 127.0.0.1:18001;
        fastcgi_param PHP_VALUE "
error_log=/home/jmygsh/logs/php/error.log;
memory_limit=512M;
max_execution_time=60;
max_input_time=60;
max_input_vars=10000;
post_max_size=64M;
upload_max_filesize=64M;
date.timezone=UTC;
display_errors=off;";
    }

    # Static file handling for backend
    location ~* \.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|woff2|eot|mp4|ogg|ogv|webm|webp|zip|swf|map)$ {
        add_header Access-Control-Allow-Origin "*";
        expires max;
        access_log off;
    }

    # Handle direct file access
    if (-f $request_filename) {
        break;
    }
}

# WebSocket server configuration
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ws.example.com; 
    server_tokens off;

    # SSL (DO NOT REMOVE!)
    ssl_certificate_key /etc/nginx/ssl-certificates/example.com.key;
    ssl_certificate /etc/nginx/ssl-certificates/example.com.crt;

    # Logging
    access_log /home/jmygsh/logs/nginx/access.log main;
    error_log /home/jmygsh/logs/nginx/error.log;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    charset utf-8;

    location / {
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header Scheme $scheme;
        proxy_set_header SERVER_PORT $server_port;
        proxy_set_header REMOTE_ADDR $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        proxy_pass http://0.0.0.0:9000;
    }

    # Deny access to hidden files
    location ~ /\.(?!well-known).* {
        deny all;
    }
}
